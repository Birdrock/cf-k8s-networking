#@ load("@ytt:data", "data")

#! Debug Pod allows easy `curl` access to services
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: debug-pod
  namespace: cf-system
  labels:
    app: debug-pod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: debug-pod
  template:
    metadata:
      labels:
        app: debug-pod
    spec:
      containers:
      - command: ["/bin/bash"]
        args:
          - "-c"
          - "sleep 500000"
        image: tutum/curl
        name: debug
        volumeMounts:
        - name: mtls-client-certs
          mountPath: /etc/mtls-client-certs
          readOnly: true
      volumes:
        - name: mtls-client-certs
          secret:
            secretName: mtls-client-certs

---
apiVersion: v1
kind: Secret
metadata:
  name: nginx-certs
  namespace: cf-system
type: Opaque
stringData:
  tls.crt: #@ data.values.backendTlsCert
  tls.key: #@ data.values.backendTlsKey

---
apiVersion: v1
kind: Secret
metadata:
  name: nginx-internal-certs
  namespace: cf-system
type: Opaque
stringData:
  tls.crt: #@ data.values.internalBackendTlsCert
  tls.key: #@ data.values.internalBackendTlsKey
  client-ca.crt: #@ data.values.clientCaCert


---
apiVersion: v1
kind: Secret
metadata:
  name: mtls-client-certs
  namespace: cf-system
type: Opaque
stringData:
  tls.crt: #@ data.values.clientTlsCert
  tls.key: #@ data.values.clientTlsKey
  backend_ca.crt: #@ data.values.internalBackendCaCert

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: cf-system
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - image: kennethreitz/httpbin:latest
          command: ["gunicorn"]
          args: ["-b", "0.0.0.0:8080", "httpbin:app", "-k", "gevent"]
          name: cf-system-component
          ports:
            - containerPort: 8080
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80
            - containerPort: 443
            - containerPort: 9443
          volumeMounts:
            - name: nginx-certs
              mountPath: /etc/nginx-certs
              readOnly: true
            - name: nginx-internal-certs
              mountPath: /etc/nginx-internal-certs
              readOnly: true
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
      volumes:
        - name: nginx-certs
          secret:
            secretName: nginx-certs
        - name: nginx-internal-certs
          secret:
            secretName: nginx-internal-certs
        - name: nginx-config
          configMap:
            name: nginx-config


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: cf-system
data:
  nginx.conf: #@ data.values.nginxConfig

---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: cf-system
spec:
  ports:
    - name: http
      port: 80
    - name: https
      port: 443
    - name: mtls
      port: 9443
  selector:
    app: nginx

---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: external-route-for-nginx
  namespace: cf-system
spec:
  gateways:
    - wildcard-sys-gateway
  hosts:
    - #@ data.values.systemComponentExternalAddress
  http:
    - route:
        - destination:
            host: nginx.cf-system.svc.cluster.local

---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: nginx-destination
  namespace: istio-system
spec:
  host: nginx.cf-system.svc.cluster.local
  trafficPolicy:
    portLevelSettings:
      - port:
          number: 443
        tls:
          mode: SIMPLE
          caCertificates: /etc/istio/ingressgateway-ca-certs/ca.crt
