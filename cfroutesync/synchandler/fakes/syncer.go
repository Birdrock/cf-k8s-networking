// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/cf-k8s-networking/cfroutesync/synchandler"
)

type Syncer struct {
	SyncStub        func(synchandler.SyncRequest) (*synchandler.SyncResponse, error)
	syncMutex       sync.RWMutex
	syncArgsForCall []struct {
		arg1 synchandler.SyncRequest
	}
	syncReturns struct {
		result1 *synchandler.SyncResponse
		result2 error
	}
	syncReturnsOnCall map[int]struct {
		result1 *synchandler.SyncResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Syncer) Sync(arg1 synchandler.SyncRequest) (*synchandler.SyncResponse, error) {
	fake.syncMutex.Lock()
	ret, specificReturn := fake.syncReturnsOnCall[len(fake.syncArgsForCall)]
	fake.syncArgsForCall = append(fake.syncArgsForCall, struct {
		arg1 synchandler.SyncRequest
	}{arg1})
	fake.recordInvocation("Sync", []interface{}{arg1})
	fake.syncMutex.Unlock()
	if fake.SyncStub != nil {
		return fake.SyncStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.syncReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Syncer) SyncCallCount() int {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return len(fake.syncArgsForCall)
}

func (fake *Syncer) SyncCalls(stub func(synchandler.SyncRequest) (*synchandler.SyncResponse, error)) {
	fake.syncMutex.Lock()
	defer fake.syncMutex.Unlock()
	fake.SyncStub = stub
}

func (fake *Syncer) SyncArgsForCall(i int) synchandler.SyncRequest {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	argsForCall := fake.syncArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Syncer) SyncReturns(result1 *synchandler.SyncResponse, result2 error) {
	fake.syncMutex.Lock()
	defer fake.syncMutex.Unlock()
	fake.SyncStub = nil
	fake.syncReturns = struct {
		result1 *synchandler.SyncResponse
		result2 error
	}{result1, result2}
}

func (fake *Syncer) SyncReturnsOnCall(i int, result1 *synchandler.SyncResponse, result2 error) {
	fake.syncMutex.Lock()
	defer fake.syncMutex.Unlock()
	fake.SyncStub = nil
	if fake.syncReturnsOnCall == nil {
		fake.syncReturnsOnCall = make(map[int]struct {
			result1 *synchandler.SyncResponse
			result2 error
		})
	}
	fake.syncReturnsOnCall[i] = struct {
		result1 *synchandler.SyncResponse
		result2 error
	}{result1, result2}
}

func (fake *Syncer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Syncer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
