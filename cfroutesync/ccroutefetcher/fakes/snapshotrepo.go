// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/cf-k8s-networking/cfroutesync/models"
)

type SnapshotRepo struct {
	PutStub        func(*models.RouteSnapshot)
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		arg1 *models.RouteSnapshot
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SnapshotRepo) Put(arg1 *models.RouteSnapshot) {
	fake.putMutex.Lock()
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		arg1 *models.RouteSnapshot
	}{arg1})
	fake.recordInvocation("Put", []interface{}{arg1})
	fake.putMutex.Unlock()
	if fake.PutStub != nil {
		fake.PutStub(arg1)
	}
}

func (fake *SnapshotRepo) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *SnapshotRepo) PutCalls(stub func(*models.RouteSnapshot)) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = stub
}

func (fake *SnapshotRepo) PutArgsForCall(i int) *models.RouteSnapshot {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	argsForCall := fake.putArgsForCall[i]
	return argsForCall.arg1
}

func (fake *SnapshotRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SnapshotRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
