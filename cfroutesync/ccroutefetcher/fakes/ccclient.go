// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/cf-k8s-networking/cfroutesync/ccclient"
)

type CCClient struct {
	ListDestinationsForRouteStub        func(string, string) ([]ccclient.Destination, error)
	listDestinationsForRouteMutex       sync.RWMutex
	listDestinationsForRouteArgsForCall []struct {
		arg1 string
		arg2 string
	}
	listDestinationsForRouteReturns struct {
		result1 []ccclient.Destination
		result2 error
	}
	listDestinationsForRouteReturnsOnCall map[int]struct {
		result1 []ccclient.Destination
		result2 error
	}
	ListDomainsStub        func(string) ([]ccclient.Domain, error)
	listDomainsMutex       sync.RWMutex
	listDomainsArgsForCall []struct {
		arg1 string
	}
	listDomainsReturns struct {
		result1 []ccclient.Domain
		result2 error
	}
	listDomainsReturnsOnCall map[int]struct {
		result1 []ccclient.Domain
		result2 error
	}
	ListRoutesStub        func(string) ([]ccclient.Route, error)
	listRoutesMutex       sync.RWMutex
	listRoutesArgsForCall []struct {
		arg1 string
	}
	listRoutesReturns struct {
		result1 []ccclient.Route
		result2 error
	}
	listRoutesReturnsOnCall map[int]struct {
		result1 []ccclient.Route
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CCClient) ListDestinationsForRoute(arg1 string, arg2 string) ([]ccclient.Destination, error) {
	fake.listDestinationsForRouteMutex.Lock()
	ret, specificReturn := fake.listDestinationsForRouteReturnsOnCall[len(fake.listDestinationsForRouteArgsForCall)]
	fake.listDestinationsForRouteArgsForCall = append(fake.listDestinationsForRouteArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ListDestinationsForRoute", []interface{}{arg1, arg2})
	fake.listDestinationsForRouteMutex.Unlock()
	if fake.ListDestinationsForRouteStub != nil {
		return fake.ListDestinationsForRouteStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listDestinationsForRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CCClient) ListDestinationsForRouteCallCount() int {
	fake.listDestinationsForRouteMutex.RLock()
	defer fake.listDestinationsForRouteMutex.RUnlock()
	return len(fake.listDestinationsForRouteArgsForCall)
}

func (fake *CCClient) ListDestinationsForRouteCalls(stub func(string, string) ([]ccclient.Destination, error)) {
	fake.listDestinationsForRouteMutex.Lock()
	defer fake.listDestinationsForRouteMutex.Unlock()
	fake.ListDestinationsForRouteStub = stub
}

func (fake *CCClient) ListDestinationsForRouteArgsForCall(i int) (string, string) {
	fake.listDestinationsForRouteMutex.RLock()
	defer fake.listDestinationsForRouteMutex.RUnlock()
	argsForCall := fake.listDestinationsForRouteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CCClient) ListDestinationsForRouteReturns(result1 []ccclient.Destination, result2 error) {
	fake.listDestinationsForRouteMutex.Lock()
	defer fake.listDestinationsForRouteMutex.Unlock()
	fake.ListDestinationsForRouteStub = nil
	fake.listDestinationsForRouteReturns = struct {
		result1 []ccclient.Destination
		result2 error
	}{result1, result2}
}

func (fake *CCClient) ListDestinationsForRouteReturnsOnCall(i int, result1 []ccclient.Destination, result2 error) {
	fake.listDestinationsForRouteMutex.Lock()
	defer fake.listDestinationsForRouteMutex.Unlock()
	fake.ListDestinationsForRouteStub = nil
	if fake.listDestinationsForRouteReturnsOnCall == nil {
		fake.listDestinationsForRouteReturnsOnCall = make(map[int]struct {
			result1 []ccclient.Destination
			result2 error
		})
	}
	fake.listDestinationsForRouteReturnsOnCall[i] = struct {
		result1 []ccclient.Destination
		result2 error
	}{result1, result2}
}

func (fake *CCClient) ListDomains(arg1 string) ([]ccclient.Domain, error) {
	fake.listDomainsMutex.Lock()
	ret, specificReturn := fake.listDomainsReturnsOnCall[len(fake.listDomainsArgsForCall)]
	fake.listDomainsArgsForCall = append(fake.listDomainsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListDomains", []interface{}{arg1})
	fake.listDomainsMutex.Unlock()
	if fake.ListDomainsStub != nil {
		return fake.ListDomainsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listDomainsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CCClient) ListDomainsCallCount() int {
	fake.listDomainsMutex.RLock()
	defer fake.listDomainsMutex.RUnlock()
	return len(fake.listDomainsArgsForCall)
}

func (fake *CCClient) ListDomainsCalls(stub func(string) ([]ccclient.Domain, error)) {
	fake.listDomainsMutex.Lock()
	defer fake.listDomainsMutex.Unlock()
	fake.ListDomainsStub = stub
}

func (fake *CCClient) ListDomainsArgsForCall(i int) string {
	fake.listDomainsMutex.RLock()
	defer fake.listDomainsMutex.RUnlock()
	argsForCall := fake.listDomainsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *CCClient) ListDomainsReturns(result1 []ccclient.Domain, result2 error) {
	fake.listDomainsMutex.Lock()
	defer fake.listDomainsMutex.Unlock()
	fake.ListDomainsStub = nil
	fake.listDomainsReturns = struct {
		result1 []ccclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *CCClient) ListDomainsReturnsOnCall(i int, result1 []ccclient.Domain, result2 error) {
	fake.listDomainsMutex.Lock()
	defer fake.listDomainsMutex.Unlock()
	fake.ListDomainsStub = nil
	if fake.listDomainsReturnsOnCall == nil {
		fake.listDomainsReturnsOnCall = make(map[int]struct {
			result1 []ccclient.Domain
			result2 error
		})
	}
	fake.listDomainsReturnsOnCall[i] = struct {
		result1 []ccclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *CCClient) ListRoutes(arg1 string) ([]ccclient.Route, error) {
	fake.listRoutesMutex.Lock()
	ret, specificReturn := fake.listRoutesReturnsOnCall[len(fake.listRoutesArgsForCall)]
	fake.listRoutesArgsForCall = append(fake.listRoutesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListRoutes", []interface{}{arg1})
	fake.listRoutesMutex.Unlock()
	if fake.ListRoutesStub != nil {
		return fake.ListRoutesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRoutesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CCClient) ListRoutesCallCount() int {
	fake.listRoutesMutex.RLock()
	defer fake.listRoutesMutex.RUnlock()
	return len(fake.listRoutesArgsForCall)
}

func (fake *CCClient) ListRoutesCalls(stub func(string) ([]ccclient.Route, error)) {
	fake.listRoutesMutex.Lock()
	defer fake.listRoutesMutex.Unlock()
	fake.ListRoutesStub = stub
}

func (fake *CCClient) ListRoutesArgsForCall(i int) string {
	fake.listRoutesMutex.RLock()
	defer fake.listRoutesMutex.RUnlock()
	argsForCall := fake.listRoutesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *CCClient) ListRoutesReturns(result1 []ccclient.Route, result2 error) {
	fake.listRoutesMutex.Lock()
	defer fake.listRoutesMutex.Unlock()
	fake.ListRoutesStub = nil
	fake.listRoutesReturns = struct {
		result1 []ccclient.Route
		result2 error
	}{result1, result2}
}

func (fake *CCClient) ListRoutesReturnsOnCall(i int, result1 []ccclient.Route, result2 error) {
	fake.listRoutesMutex.Lock()
	defer fake.listRoutesMutex.Unlock()
	fake.ListRoutesStub = nil
	if fake.listRoutesReturnsOnCall == nil {
		fake.listRoutesReturnsOnCall = make(map[int]struct {
			result1 []ccclient.Route
			result2 error
		})
	}
	fake.listRoutesReturnsOnCall[i] = struct {
		result1 []ccclient.Route
		result2 error
	}{result1, result2}
}

func (fake *CCClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listDestinationsForRouteMutex.RLock()
	defer fake.listDestinationsForRouteMutex.RUnlock()
	fake.listDomainsMutex.RLock()
	defer fake.listDomainsMutex.RUnlock()
	fake.listRoutesMutex.RLock()
	defer fake.listRoutesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CCClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
